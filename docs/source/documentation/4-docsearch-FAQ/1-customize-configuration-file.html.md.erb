---
title: Customize my configuration file
---

## What are the recommendations regarding the content to index?

### Code blocks

Since code blocks are most likely very similar and redundant from one page to
another, we **do not recommend** to index **code tags** by adding their matching
selectors to `selectors_exclude`.

A good practice would be to emphasize the meaningful underlying part of it
thanks to a dedicated class. This class will be added to the `text` selector
from your configuration file.

### Table of contents

Table of contents elements only target element without providing the relevant
content. It is a superfluous step on the way to reach the relevant data and is
mainly at a different place from the pay load. This is why we consider these
elements as obstacles on the way to find the coveted information.

We **do not recommend** to index these elements by adding their matching
selectors to `selectors_exclude`.

## How are my DocSearch records ranked?

DocSearch empowers the algolia's ranking strategy. The formula is completely
based on [the tie-breaking approach](https://www.algolia.com/doc/guides/ranking/ranking-formula/#tie-breaking-approach).

The special feature of DocSearch's ranking resides in [the custom ranking](https://www.algolia.com/doc/guides/ranking/custom-ranking/):

We have defined 3 main weight indicators for every records. These values are
ordered by importance following the tie breaking approach:
1. `page_rank`: this value, equals to `0` by default, can be set from the
`start_urls` object. It can be customized in order to boost or restrain some
records depending on **their webpage's URL**. It will need to match a **specific
regular expression pattern**.

**Example:**
 ```json
{
   "index_name": "example",
    "start_urls": [
     {
      "url": "http://example.com/docs/api/v1\\.[0-9]",
      "page_rank": 1
     }
    ]
}
```
2. `level`: this value depends on the `level` of the record. A record's level is
 its **deepest level attribute not null**. `text` records have a weight of 0.
3. `position`: This value is the position of the matching element within every
picked up elements along the original HTML flow. The **sooner** the record appears,
 the **higher** it will be ranked

 You can override the way these elements are impacting the search thanks to `custom_settings`.

 **Example:**

 ```json
"custom_settings": {
  "customRanking": [
  "asc(weight.position)",
    "desc(weight.page_rank)",
    "desc(weight.level)"
  ]
}
 ```
